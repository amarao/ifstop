#!/usr/bin/python

#    (c) Selectel, 2013
#    by George Shuklin
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

'''
    display top of interfaces in system

    Note: this utility designed to be portable:
        * single file to execute
        * python 2.4 (default Centos 5)
        * no non-standart dependencies
'''
import os,sys,stat
import time
import curses

VERSION="1.0"

def make_k (n,scale=1000, force_high=False):
    '''
        return human-like view, supports k & M
    '''
    if n < 10*scale and not force_high:
        return str(n)
    if  n < 100*scale*scale:
        return str(n/scale)+' k'
    return str(n/scale/scale)+' M'


class Stats(dict):
    def __init__(self,scan_path):
        dict.__init__(self)
        errors=[
            "collisions",
            "rx_crc_errors", 
            "rx_dropped", 
            "rx_errors", 
            "rx_fifo_errors", 
            "rx_frame_errors", 
            "rx_length_errors",    
            "rx_missed_errors",
            "rx_over_errors",
            "tx_aborted_errors",
            "tx_carrier_errors",
            "tx_dropped",
            "tx_errors",
            "tx_fifo_errors",
            "tx_heartbeat_errors",
            "tx_window_errors"
        ] #all them are counted in 'errors' column
        stat2int=lambda f:int(open(os.path.join(scan_path,'statistics',f)).read().strip())
        self['errors']=sum(map(stat2int, errors))
        self['rx']=stat2int('rx_bytes')
        self['tx']=stat2int('tx_bytes')
        self['rxp']=stat2int('rx_packets')
        self['txp']=stat2int('tx_packets')

    def __sub__(self,second):
        return dict((key,self[key]-second[key]) for key in self.iterkeys())


class IF:
    def __init__(self, path,name):
        self.path=path
        self.name=name
        self.vanished=False
        self.new=True

    def tick(self):
        try:
            new_raw=Stats(os.path.join(self.path,self.name))
            if hasattr(self,'raw'):
                self.stats=new_raw-self.raw
                self.new=False
            self.raw=new_raw
        except IOError:
            print self.name, "disappear"
            self.vanished=True #no stats - no interface

    def bool(self):
        return self.vanished

    def result(self,screen,tick=1):
        try:
            screen.addstr(str(self).ljust(13))
            if not self.new:
                for field in "errors","tx","rx","txp", "rxp":
                    screen.addstr(str(make_k(self.stats[field])).ljust(13))
            else:
                screen.addstr("new interface (gathering)")
            if self.vanished:
                screen.addstr("VANISHED")
            screen.addstr('\n')
        except curses.error:
            pass
            
    def __str__(self):
        return self.name

    def cmp_keys(self,key):
        if not self.new:
            return self.stats[key]
        else:
            return -1
        

class Ifaces(list):
    def __init__(self,sys_path='/sys/class/net'):
        list.__init__(self)
        self.sys_path=sys_path
        self.rescan()
        self.fields=['errors','tx','rx','txp','rxp']
        self.sortby=1
        self.firstrun=True

    def rescan(self):
#       map(self.remove,filter(bool, self))
       d=[f for f in os.listdir(self.sys_path) if stat.S_ISDIR(os.stat(os.path.join(self.sys_path,f)).st_mode)] 
       new_ifaces=set(map(str,d))-set(map(str,self))
       if new_ifaces:
            map (self.append, map(lambda i: IF(self.sys_path,i), new_ifaces))
       map(IF.tick,self)

    def dump(self,screen,sort=0,tick=1):
        self.nextkey(sort)
        list.sort(self,key=lambda x: x.cmp_keys(self.fields[self.sortby]),reverse=True)
        screen.clear()
        screen.addstr("iface".ljust(13),curses.A_REVERSE)
        for n,item in enumerate(self.fields):
            if n == self.sortby:
                screen.addstr(item.ljust(13),curses.A_BOLD|curses.A_REVERSE)
            else:
                screen.addstr(item.ljust(13),curses.A_REVERSE)
        screen.addstr('\n')
        for i in self:
            IF.result(i,screen)
        if self.firstrun or sort:
            try:
                screen.addstr("\nsorting by: "+self.fields[self.sortby]+". To change use Left/Right arrows\n")
            except curses.error:
                pass

        if self.firstrun:
            self.firstrun=False
        screen.refresh()

    def nextkey(self,shift):
        if 0 <= self.sortby+shift < len(self.fields):
            self.sortby=self.sortby+shift
        elif self.sortby+shift <0:
            self.sortby=len(self.fields)-1
        elif self.sortby+shift >=len(self.fields):
            self.sortby=0


def sleepkey(screen):
    '''
        return tuple of key (key or -1 if no key) and actual wait time (in seconds)
    '''
    before=time.time()
    key=screen.getch()
    after=time.time()
    return (key,after-before)

def ask_delay(screen,olddelay):
    text="Enter new delay (milliseconds):"
    screen.addstr(0, 0, text+" "*5)
    screen.refresh()
    screen.timeout(-1)
    curses.echo()
    i=screen.getstr(0,len(text),5)
    curses.noecho()
    try:
        newdelay=int(i)
        if newdelay==0:
            newdelay=1
    except:
        newdelay=olddelay
    screen.timeout(newdelay)
    return newdelay
        

def main(stdscr):
    curses.use_default_colors()
    stdscr.timeout(1000)
    ifaces=Ifaces()
    while 1:
        sort=0
        (key,delay)=sleepkey(stdscr)
        if delay < 0.001:
            delay=0.001
        if key == curses.KEY_LEFT:
            sort-=1
        if key == curses.KEY_RIGHT:
            sort+=1
        if key == ord('q'):
            sys.exit(-1)
        if key == ord('i'):
            delay=ask_delay(stdscr,delay)
        ifaces.dump(stdscr,tick=delay,sort=sort)
        ifaces.rescan()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == '--version':
            print 'ifstop version %s'%VERSION
            sys.exit(0)
        else:
            print 'Display top of interfaces (no command-line options except --version)'
            sys.exit(0)
        try:
            curses.wrapper(main)
        except KeyboardInterrupt:
            pass

